buildscript {
    ext.cubaVersion = '7.2.18'
    repositories {

        mavenLocal()
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }

            maven {

                url "https://dl.bintray.com/aleksey-stukalov/cuba-components"

            }
            maven{
                url "https://jitpack.io"

            }

        }

    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"

        //bintray upload plugin
//        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
    }
}



plugins {
    id ('maven-publish')

}
apply(plugin: 'maven-publish')
apply(plugin: 'maven')

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Hanan-Hussein/pswdplus")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
        maven {
            url "https://jitpack.io"

        }

    }

}
def modulePrefix = 'pswdplus'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'


apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'ar.com.osmosys.pswdplus'
        version = '1.1.0'
        isSnapshot = false
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    ide {
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")

}

def mysql = 'mysql:mysql-connector-java:5.1.46'

configure([globalModule, coreModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    dependencies {
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
    }
    entitiesEnhancing {
        main {
            enabled = true
        }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }


}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(mysql)
        testRuntime(mysql)

    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'mysql'
        host = '192.168.2.2'
        dbName = 'pswdplus72'
        dbUser = 'root'
        dbPassword = 'kawasaki'
        connectionParams = '?useSSL=false&allowMultiQueries=true'
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'mysql'
        host = '192.168.2.2'
        dbName = 'pswdplus72'
        dbUser = 'root'
        dbPassword = 'kawasaki'
        connectionParams = '?useSSL=false&allowMultiQueries=true'
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(globalModule)

    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "ar/com/osmosys/pswdplus/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }
}


task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start


//subprojects {
//    apply plugin: 'com.jfrog.bintray'
//
//    bintray {
//        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
//
//        configurations = ['archives']
//
//        // make files public ?
//        publish = true
//        // override existing artifacts?
//        override = true
//
//        // metadata
//        pkg {
//            repo = 'main'           // your repository name
//            name = 'cuba-pswdplus'  // package name - it will be created upon upload
//            desc = 'Password history and expiration for CUBA Platform'  // optional package description
//
//            // organization name, if your repository is created inside an organization.
//            // remove this parameter if you don't have an organization
//            //userOrg = 'jupiter-org'
//
//            websiteUrl = 'https://github.com/pakuda/pswdplus'
//            issueTrackerUrl = 'https://github.com/pakuda/pswdplus/issues'
//            vcsUrl = 'https://github.com/pakuda/pswdplus.git' // mandatory for Open Source projects
//
//            licenses = ["Apache-2.0"]
//            labels = ['cuba-platform', 'opensource']
//
//            githubRepo = 'pakuda/pswdplus' // optional Github repository
//            githubReleaseNotesFile = 'README.md' // optional Github readme file
//        }
//    }
//}